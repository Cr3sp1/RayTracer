using System;
using System.IO;
using Xunit;
using Trace;

namespace Trace.Tests;

public class HdrImageTests
{
    // Test constructor
    [Fact]
    public void TestImageCreation()
    {
        var img = new HdrImage(5, 6);
        Assert.Equal(5, img.Width);
        Assert.Equal(6, img.Height);
    }

    // Test method ValidCoords
    [Fact]
    public void TestValidCoords()
    {
        var img = new HdrImage(5, 6);
        Assert.True(img.ValidCoords(0, 0));
        Assert.True(img.ValidCoords(2, 1));
        Assert.True(img.ValidCoords(4, 5));
        Assert.False(img.ValidCoords(5, 6));
        Assert.False(img.ValidCoords(5, 0));
        Assert.False(img.ValidCoords(0, 6));
        Assert.False(img.ValidCoords(-1, 0));
        Assert.False(img.ValidCoords(0, -1));
    }

    // Test methods SetPixel and GetPixel
    [Fact]
    public void TestGetSetPixel()
    {
        var img = new HdrImage(5, 6);
        var pixel = new Color(1, 2, 3.1f);
        img.SetPixel(0, 1, pixel);
        Assert.Equal(3.1f, img.GetPixel(0, 1).B);
        Assert.Equal(pixel, img.GetPixel(0, 1));
    }
    
    // Test ReadPfm method
    [Fact]
    public void TestReadPfm()
    {
        byte[] leReferenceBytes =
        {
            0x50, 0x46, 0x0a, 0x33, 0x20, 0x32, 0x0a, 0x2d, 0x31, 0x2e, 0x30, 0x0a,
            0x00, 0x00, 0xc8, 0x42, 0x00, 0x00, 0x48, 0x43, 0x00, 0x00, 0x96, 0x43,
            0x00, 0x00, 0xc8, 0x43, 0x00, 0x00, 0xfa, 0x43, 0x00, 0x00, 0x16, 0x44,
            0x00, 0x00, 0x2f, 0x44, 0x00, 0x00, 0x48, 0x44, 0x00, 0x00, 0x61, 0x44,
            0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0xa0, 0x41, 0x00, 0x00, 0xf0, 0x41,
            0x00, 0x00, 0x20, 0x42, 0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x70, 0x42,
            0x00, 0x00, 0x8c, 0x42, 0x00, 0x00, 0xa0, 0x42, 0x00, 0x00, 0xb4, 0x42
        };
        byte[] beReferenceBytes =
        {
            0x50, 0x46, 0x0a, 0x33, 0x20, 0x32, 0x0a, 0x31, 0x2e, 0x30, 0x0a, 0x42,
            0xc8, 0x00, 0x00, 0x43, 0x48, 0x00, 0x00, 0x43, 0x96, 0x00, 0x00, 0x43,
            0xc8, 0x00, 0x00, 0x43, 0xfa, 0x00, 0x00, 0x44, 0x16, 0x00, 0x00, 0x44,
            0x2f, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x41,
            0x20, 0x00, 0x00, 0x41, 0xa0, 0x00, 0x00, 0x41, 0xf0, 0x00, 0x00, 0x42,
            0x20, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x42,
            0x8c, 0x00, 0x00, 0x42, 0xa0, 0x00, 0x00, 0x42, 0xb4, 0x00, 0x00
        };

        /*using (MemoryStream ms = new MemoryStream(leReferenceBytes))
        {
            var testImg = new HdrImage();
            testImg.ReadPfm(ms);
            
        }*/
    }
}